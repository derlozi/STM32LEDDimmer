
STMLEDDimme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000254c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002628  08002628  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08002628  08002628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002630  08002630  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000020  08002658  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002658  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b07  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001459  00000000  00000000  00027b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00028fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00029788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012844  00000000  00000000  00029ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082d4  00000000  00000000  0003c704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074741  00000000  00000000  000449d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000b916c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025f4 	.word	0x080025f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080025f4 	.word	0x080025f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fb18 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f80c 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f8be 	bl	8000628 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ac:	f000 f85c 	bl	8000568 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80004b0:	4b02      	ldr	r3, [pc, #8]	; (80004bc <main+0x20>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fbfd 	bl	8001cb4 <HAL_TIM_PWM_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <main+0x1e>
 80004bc:	20000044 	.word	0x20000044

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b095      	sub	sp, #84	; 0x54
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2418      	movs	r4, #24
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2338      	movs	r3, #56	; 0x38
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f002 f887 	bl	80025e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f002 f880 	bl	80025e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <SystemClock_Config+0xa0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <SystemClock_Config+0xa4>)
 80004ea:	401a      	ands	r2, r3
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <SystemClock_Config+0xa0>)
 80004ee:	2180      	movs	r1, #128	; 0x80
 80004f0:	0109      	lsls	r1, r1, #4
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2210      	movs	r2, #16
 80004fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	22a0      	movs	r2, #160	; 0xa0
 800050e:	0212      	lsls	r2, r2, #8
 8000510:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	187b      	adds	r3, r7, r1
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fdd8 	bl	80010d0 <HAL_RCC_OscConfig>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000524:	f000 f9cc 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	220f      	movs	r2, #15
 800052c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2100      	movs	r1, #0
 800054a:	0018      	movs	r0, r3
 800054c:	f001 f984 	bl	8001858 <HAL_RCC_ClockConfig>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000554:	f000 f9b4 	bl	80008c0 <Error_Handler>
  }
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b015      	add	sp, #84	; 0x54
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	40007000 	.word	0x40007000
 8000564:	ffffe7ff 	.word	0xffffe7ff

08000568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056e:	2310      	movs	r3, #16
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	0018      	movs	r0, r3
 8000574:	2308      	movs	r3, #8
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f002 f833 	bl	80025e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057e:	003b      	movs	r3, r7
 8000580:	0018      	movs	r0, r3
 8000582:	2310      	movs	r3, #16
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f002 f82c 	bl	80025e4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <MX_TIM2_Init+0xbc>)
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	05d2      	lsls	r2, r2, #23
 8000592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_TIM2_Init+0xbc>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <MX_TIM2_Init+0xbc>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_TIM2_Init+0xbc>)
 80005a2:	22fa      	movs	r2, #250	; 0xfa
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_TIM2_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_TIM2_Init+0xbc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_TIM2_Init+0xbc>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fb3c 	bl	8001c34 <HAL_TIM_PWM_Init>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 f97e 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c4:	2110      	movs	r1, #16
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d2:	187a      	adds	r2, r7, r1
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_TIM2_Init+0xbc>)
 80005d6:	0011      	movs	r1, r2
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 ff87 	bl	80024ec <HAL_TIMEx_MasterConfigSynchronization>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005e2:	f000 f96d 	bl	80008c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e6:	003b      	movs	r3, r7
 80005e8:	2260      	movs	r2, #96	; 0x60
 80005ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f2:	003b      	movs	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005fe:	0039      	movs	r1, r7
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_TIM2_Init+0xbc>)
 8000602:	2204      	movs	r2, #4
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fd0f 	bl	8002028 <HAL_TIM_PWM_ConfigChannel>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800060e:	f000 f957 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <MX_TIM2_Init+0xbc>)
 8000614:	0018      	movs	r0, r3
 8000616:	f000 f98b 	bl	8000930 <HAL_TIM_MspPostInit>

}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b006      	add	sp, #24
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	20000044 	.word	0x20000044

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	0018      	movs	r0, r3
 8000632:	2314      	movs	r3, #20
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f001 ffd4 	bl	80025e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_GPIO_Init+0x88>)
 800063e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_GPIO_Init+0x88>)
 8000642:	2101      	movs	r1, #1
 8000644:	430a      	orrs	r2, r1
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_GPIO_Init+0x88>)
 800064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064c:	2201      	movs	r2, #1
 800064e:	4013      	ands	r3, r2
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : ENC_CLK_Pin ENC_DATA_Pin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DATA_Pin;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2201      	movs	r2, #1
 8000664:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fb7e 	bl	8000d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BT_Pin */
  GPIO_InitStruct.Pin = ENC_BT_Pin;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2284      	movs	r2, #132	; 0x84
 800067e:	0392      	lsls	r2, r2, #14
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2201      	movs	r2, #1
 8000686:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_BT_GPIO_Port, &GPIO_InitStruct);
 8000688:	1d3a      	adds	r2, r7, #4
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fb6d 	bl	8000d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2007      	movs	r0, #7
 800069c:	f000 fb36 	bl	8000d0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006a0:	2007      	movs	r0, #7
 80006a2:	f000 fb48 	bl	8000d36 <HAL_NVIC_EnableIRQ>

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b006      	add	sp, #24
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

	if(debounceCounter != 0)//use PWM Timer as timebase for debouncing (as well as for the state machine:)
 80006bc:	4b64      	ldr	r3, [pc, #400]	; (8000850 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d005      	beq.n	80006d0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
	{
		debounceCounter -= 1;
 80006c4:	4b62      	ldr	r3, [pc, #392]	; (8000850 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b60      	ldr	r3, [pc, #384]	; (8000850 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80006ce:	801a      	strh	r2, [r3, #0]
	}

	freqDivCnt++;//variable used to realize slower clocking for slow pwm changes, makes things smooooooooth
 80006d0:	4b60      	ldr	r3, [pc, #384]	; (8000854 <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b5e      	ldr	r3, [pc, #376]	; (8000854 <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 80006da:	701a      	strb	r2, [r3, #0]
	if(freqDivCnt%4==0)
 80006dc:	4b5d      	ldr	r3, [pc, #372]	; (8000854 <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2203      	movs	r2, #3
 80006e2:	4013      	ands	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d11b      	bne.n	8000722 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{
		if(pwmSet > htim->Instance->CCR2)
 80006ea:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	5e9b      	ldrsh	r3, [r3, r2]
 80006f0:	001a      	movs	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d904      	bls.n	8000706 <HAL_TIM_PWM_PulseFinishedCallback+0x52>
		{
			htim->Instance->CCR2++;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000702:	3201      	adds	r2, #1
 8000704:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if(pwmSet < htim->Instance->CCR2)
 8000706:	4b54      	ldr	r3, [pc, #336]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 8000708:	2200      	movs	r2, #0
 800070a:	5e9b      	ldrsh	r3, [r3, r2]
 800070c:	001a      	movs	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000714:	429a      	cmp	r2, r3
 8000716:	d204      	bcs.n	8000722 <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
		{
			htim->Instance->CCR2--;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800071e:	3a01      	subs	r2, #1
 8000720:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	//process signals in worlds longest and worst state machine, contains possible illegal state transitions from fwSequence to bwSequence, dont wanna fix
	//but no debouncing needed!!!!!
	uint8_t state = ((HAL_GPIO_ReadPin(ENC_DATA_GPIO_Port, ENC_DATA_Pin)==GPIO_PIN_SET?1:0) << 4) | (HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port, ENC_CLK_Pin)==GPIO_PIN_SET?1:0);
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2120      	movs	r1, #32
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fc97 	bl	800105c <HAL_GPIO_ReadPin>
 800072e:	0003      	movs	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d101      	bne.n	8000738 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
 8000734:	2410      	movs	r4, #16
 8000736:	e000      	b.n	800073a <HAL_TIM_PWM_PulseFinishedCallback+0x86>
 8000738:	2400      	movs	r4, #0
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2108      	movs	r1, #8
 8000740:	0018      	movs	r0, r3
 8000742:	f000 fc8b 	bl	800105c <HAL_GPIO_ReadPin>
 8000746:	0003      	movs	r3, r0
 8000748:	3b01      	subs	r3, #1
 800074a:	425a      	negs	r2, r3
 800074c:	4153      	adcs	r3, r2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	4323      	orrs	r3, r4
 8000754:	b25a      	sxtb	r2, r3
 8000756:	210f      	movs	r1, #15
 8000758:	187b      	adds	r3, r7, r1
 800075a:	701a      	strb	r2, [r3, #0]
	if(state != prevState)//encoder moved
 800075c:	4b3f      	ldr	r3, [pc, #252]	; (800085c <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	187a      	adds	r2, r7, r1
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d100      	bne.n	800076a <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
 8000768:	e06e      	b.n	8000848 <HAL_TIM_PWM_PulseFinishedCallback+0x194>
	{
		if(prevState == fwSequence[stateCounter] && state == fwSequence[stateCounter+1])//moved "forwards"
 800076a:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	001a      	movs	r2, r3
 8000770:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>)
 8000772:	5c9a      	ldrb	r2, [r3, r2]
 8000774:	4b39      	ldr	r3, [pc, #228]	; (800085c <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d12a      	bne.n	80007d2 <HAL_TIM_PWM_PulseFinishedCallback+0x11e>
 800077c:	4b38      	ldr	r3, [pc, #224]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a38      	ldr	r2, [pc, #224]	; (8000864 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>)
 8000784:	5cd3      	ldrb	r3, [r2, r3]
 8000786:	187a      	adds	r2, r7, r1
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	d121      	bne.n	80007d2 <HAL_TIM_PWM_PulseFinishedCallback+0x11e>
		{
			stateCounter++;
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000798:	701a      	strb	r2, [r3, #0]
			if(stateCounter == 4)//rotation completed
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b04      	cmp	r3, #4
 80007a0:	d14d      	bne.n	800083e <HAL_TIM_PWM_PulseFinishedCallback+0x18a>
			{
				if(pwmSet + 50 < 1000)
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	5e9b      	ldrsh	r3, [r3, r2]
 80007a8:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <HAL_TIM_PWM_PulseFinishedCallback+0x1b4>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	dc09      	bgt.n	80007c2 <HAL_TIM_PWM_PulseFinishedCallback+0x10e>
				{
					pwmSet += 50;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	5e9b      	ldrsh	r3, [r3, r2]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	3332      	adds	r3, #50	; 0x32
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 80007be:	801a      	strh	r2, [r3, #0]
 80007c0:	e003      	b.n	80007ca <HAL_TIM_PWM_PulseFinishedCallback+0x116>
				}
				else
				{
					pwmSet = 1000;//for clean max output, should the incrementing steps not add up to 1000
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 80007c4:	22fa      	movs	r2, #250	; 0xfa
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	801a      	strh	r2, [r3, #0]
				}
				stateCounter = 0;
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
			if(stateCounter == 4)//rotation completed
 80007d0:	e035      	b.n	800083e <HAL_TIM_PWM_PulseFinishedCallback+0x18a>
			}
		}
		else if(prevState == bwSequence[stateCounter] && state == bwSequence[stateCounter+1])//moved "backwards"
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	001a      	movs	r2, r3
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 80007da:	5c9a      	ldrb	r2, [r3, r2]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d129      	bne.n	8000838 <HAL_TIM_PWM_PulseFinishedCallback+0x184>
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a20      	ldr	r2, [pc, #128]	; (800086c <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	220f      	movs	r2, #15
 80007f0:	18ba      	adds	r2, r7, r2
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d11f      	bne.n	8000838 <HAL_TIM_PWM_PulseFinishedCallback+0x184>
		{
			stateCounter++;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000802:	701a      	strb	r2, [r3, #0]
			if(stateCounter == 4)
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b04      	cmp	r3, #4
 800080a:	d118      	bne.n	800083e <HAL_TIM_PWM_PulseFinishedCallback+0x18a>
			{
				if(pwmSet > 50)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 800080e:	2200      	movs	r2, #0
 8000810:	5e9b      	ldrsh	r3, [r3, r2]
 8000812:	2b32      	cmp	r3, #50	; 0x32
 8000814:	dd09      	ble.n	800082a <HAL_TIM_PWM_PulseFinishedCallback+0x176>
				{
					pwmSet -= 50;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 8000818:	2200      	movs	r2, #0
 800081a:	5e9b      	ldrsh	r3, [r3, r2]
 800081c:	b29b      	uxth	r3, r3
 800081e:	3b32      	subs	r3, #50	; 0x32
 8000820:	b29b      	uxth	r3, r3
 8000822:	b21a      	sxth	r2, r3
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 8000826:	801a      	strh	r2, [r3, #0]
 8000828:	e002      	b.n	8000830 <HAL_TIM_PWM_PulseFinishedCallback+0x17c>
				}
				else
				{
					pwmSet = 0;//for clean 0 output, should decrementing steps not add up to 0;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 800082c:	2200      	movs	r2, #0
 800082e:	801a      	strh	r2, [r3, #0]
				}
				stateCounter = 0;
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
			if(stateCounter == 4)
 8000836:	e002      	b.n	800083e <HAL_TIM_PWM_PulseFinishedCallback+0x18a>
			}
		}
		else//signals didn't follow predefined sequences, reset FSM
		{
			stateCounter = 0;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
		}
		prevState = state;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8000840:	220f      	movs	r2, #15
 8000842:	18ba      	adds	r2, r7, r2
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	701a      	strb	r2, [r3, #0]
	}

}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b005      	add	sp, #20
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	2000003c 	.word	0x2000003c
 8000854:	20000042 	.word	0x20000042
 8000858:	20000040 	.word	0x20000040
 800085c:	20000000 	.word	0x20000000
 8000860:	2000003e 	.word	0x2000003e
 8000864:	20000004 	.word	0x20000004
 8000868:	000003b5 	.word	0x000003b5
 800086c:	2000000c 	.word	0x2000000c

08000870 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//tested, works
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	0002      	movs	r2, r0
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ENC_BT_Pin)
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	2b80      	cmp	r3, #128	; 0x80
 8000882:	d114      	bne.n	80008ae <HAL_GPIO_EXTI_Callback+0x3e>
	{
		if(debounceCounter == 0)
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d110      	bne.n	80008ae <HAL_GPIO_EXTI_Callback+0x3e>
		{
			debounceCounter = DEBOUNCE_TICKCOUNT;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x48>)
 800088e:	22fa      	movs	r2, #250	; 0xfa
 8000890:	0052      	lsls	r2, r2, #1
 8000892:	801a      	strh	r2, [r3, #0]
			if(pwmSet > 0)
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_GPIO_EXTI_Callback+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	5e9b      	ldrsh	r3, [r3, r2]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd03      	ble.n	80008a6 <HAL_GPIO_EXTI_Callback+0x36>
			{
				pwmSet = 0;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_GPIO_EXTI_Callback+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	801a      	strh	r2, [r3, #0]
			{
				pwmSet = 1000;
			}
		}
	}
}
 80008a4:	e003      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0x3e>
				pwmSet = 1000;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_GPIO_EXTI_Callback+0x4c>)
 80008a8:	22fa      	movs	r2, #250	; 0xfa
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	801a      	strh	r2, [r3, #0]
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	2000003c 	.word	0x2000003c
 80008bc:	20000040 	.word	0x20000040

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_MspInit+0x24>)
 80008d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_MspInit+0x24>)
 80008d6:	2101      	movs	r1, #1
 80008d8:	430a      	orrs	r2, r1
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <HAL_MspInit+0x24>)
 80008de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <HAL_MspInit+0x24>)
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	0549      	lsls	r1, r1, #21
 80008e6:	430a      	orrs	r2, r1
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	429a      	cmp	r2, r3
 8000906:	d10d      	bne.n	8000924 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_TIM_PWM_MspInit+0x38>)
 800090a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_TIM_PWM_MspInit+0x38>)
 800090e:	2101      	movs	r1, #1
 8000910:	430a      	orrs	r2, r1
 8000912:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	200f      	movs	r0, #15
 800091a:	f000 f9f7 	bl	8000d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800091e:	200f      	movs	r0, #15
 8000920:	f000 fa09 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	240c      	movs	r4, #12
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f001 fe4e 	bl	80025e4 <memset>
  if(htim->Instance==TIM2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	429a      	cmp	r2, r3
 8000952:	d122      	bne.n	800099a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_TIM_MspPostInit+0x74>)
 8000956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_TIM_MspPostInit+0x74>)
 800095a:	2101      	movs	r1, #1
 800095c:	430a      	orrs	r2, r1
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_TIM_MspPostInit+0x74>)
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	2201      	movs	r2, #1
 8000966:	4013      	ands	r3, r2
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800096c:	0021      	movs	r1, r4
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2202      	movs	r2, #2
 8000972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2202      	movs	r2, #2
 8000978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2202      	movs	r2, #2
 800098a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	187a      	adds	r2, r7, r1
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f000 f9eb 	bl	8000d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b009      	add	sp, #36	; 0x24
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f8d4 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BT_Pin);
 80009de:	2080      	movs	r0, #128	; 0x80
 80009e0:	f000 fb5a 	bl	8001098 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <TIM2_IRQHandler+0x14>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fa30 	bl	8001e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000044 	.word	0x20000044

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <SystemInit+0x64>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <SystemInit+0x64>)
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	0049      	lsls	r1, r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <SystemInit+0x64>)
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <SystemInit+0x64>)
 8000a1c:	4913      	ldr	r1, [pc, #76]	; (8000a6c <SystemInit+0x68>)
 8000a1e:	400a      	ands	r2, r1
 8000a20:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <SystemInit+0x64>)
 8000a28:	4911      	ldr	r1, [pc, #68]	; (8000a70 <SystemInit+0x6c>)
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SystemInit+0x64>)
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <SystemInit+0x64>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	438a      	bics	r2, r1
 8000a38:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <SystemInit+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <SystemInit+0x64>)
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <SystemInit+0x70>)
 8000a42:	400a      	ands	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <SystemInit+0x64>)
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <SystemInit+0x64>)
 8000a4c:	490a      	ldr	r1, [pc, #40]	; (8000a78 <SystemInit+0x74>)
 8000a4e:	400a      	ands	r2, r1
 8000a50:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SystemInit+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SystemInit+0x78>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	0512      	lsls	r2, r2, #20
 8000a5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	88ff400c 	.word	0x88ff400c
 8000a70:	fef6fff6 	.word	0xfef6fff6
 8000a74:	fffbffff 	.word	0xfffbffff
 8000a78:	ff02ffff 	.word	0xff02ffff
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
  ldr  r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000a9e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000aa0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa2:	3204      	adds	r2, #4

08000aa4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <LoopForever+0x16>)
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000aaa:	f7ff ffab 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f001 fd75 	bl	800259c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fcf3 	bl	800049c <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
   ldr   r0, =_estack
 8000ab8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000abc:	08002638 	.word	0x08002638
  ldr  r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac4:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8000ac8:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8000acc:	20000088 	.word	0x20000088

08000ad0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_COMP_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x3c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Init+0x3c>)
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f811 	bl	8000b14 <HAL_InitTick>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d003      	beq.n	8000afe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e001      	b.n	8000b02 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afe:	f7ff fee5 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
}
 8000b06:	0018      	movs	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b1e:	681c      	ldr	r4, [r3, #0]
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x60>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	0019      	movs	r1, r3
 8000b26:	23fa      	movs	r3, #250	; 0xfa
 8000b28:	0098      	lsls	r0, r3, #2
 8000b2a:	f7ff faed 	bl	8000108 <__udivsi3>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	0019      	movs	r1, r3
 8000b32:	0020      	movs	r0, r4
 8000b34:	f7ff fae8 	bl	8000108 <__udivsi3>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f90b 	bl	8000d56 <HAL_SYSTICK_Config>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e00f      	b.n	8000b68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d80b      	bhi.n	8000b66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2301      	movs	r3, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 f8d8 	bl	8000d0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_InitTick+0x64>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	20000014 	.word	0x20000014
 8000b74:	2000001c 	.word	0x2000001c
 8000b78:	20000018 	.word	0x20000018

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	001a      	movs	r2, r3
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x20>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	18d2      	adds	r2, r2, r3
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_IncTick+0x20>)
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	2000001c 	.word	0x2000001c
 8000b9c:	20000084 	.word	0x20000084

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <HAL_GetTick+0x10>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000084 	.word	0x20000084

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc6:	d809      	bhi.n	8000bdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	001a      	movs	r2, r3
 8000bce:	231f      	movs	r3, #31
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_EnableIRQ+0x30>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	000a      	movs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
  }
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	0002      	movs	r2, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bfc:	d828      	bhi.n	8000c50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <__NVIC_SetPriority+0xd4>)
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	33c0      	adds	r3, #192	; 0xc0
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	589b      	ldr	r3, [r3, r2]
 8000c0e:	1dfa      	adds	r2, r7, #7
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	0011      	movs	r1, r2
 8000c14:	2203      	movs	r2, #3
 8000c16:	400a      	ands	r2, r1
 8000c18:	00d2      	lsls	r2, r2, #3
 8000c1a:	21ff      	movs	r1, #255	; 0xff
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	43d2      	mvns	r2, r2
 8000c22:	401a      	ands	r2, r3
 8000c24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	019b      	lsls	r3, r3, #6
 8000c2a:	22ff      	movs	r2, #255	; 0xff
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0018      	movs	r0, r3
 8000c34:	2303      	movs	r3, #3
 8000c36:	4003      	ands	r3, r0
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3c:	481f      	ldr	r0, [pc, #124]	; (8000cbc <__NVIC_SetPriority+0xd4>)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	430a      	orrs	r2, r1
 8000c48:	33c0      	adds	r3, #192	; 0xc0
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c4e:	e031      	b.n	8000cb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <__NVIC_SetPriority+0xd8>)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0019      	movs	r1, r3
 8000c58:	230f      	movs	r3, #15
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	3b08      	subs	r3, #8
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3306      	adds	r3, #6
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	3304      	adds	r3, #4
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	1dfa      	adds	r2, r7, #7
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	0011      	movs	r1, r2
 8000c70:	2203      	movs	r2, #3
 8000c72:	400a      	ands	r2, r1
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	21ff      	movs	r1, #255	; 0xff
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	000a      	movs	r2, r1
 8000c7c:	43d2      	mvns	r2, r2
 8000c7e:	401a      	ands	r2, r3
 8000c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	401a      	ands	r2, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2303      	movs	r3, #3
 8000c92:	4003      	ands	r3, r0
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <__NVIC_SetPriority+0xd8>)
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001c      	movs	r4, r3
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	4023      	ands	r3, r4
 8000ca4:	3b08      	subs	r3, #8
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	3306      	adds	r3, #6
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	18c3      	adds	r3, r0, r3
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b003      	add	sp, #12
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	045b      	lsls	r3, r3, #17
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d301      	bcc.n	8000cdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e010      	b.n	8000cfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <SysTick_Config+0x44>)
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	425b      	negs	r3, r3
 8000ce8:	2103      	movs	r1, #3
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff ff7c 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x44>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x44>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	210f      	movs	r1, #15
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	1c02      	adds	r2, r0, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	0011      	movs	r1, r2
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	0002      	movs	r2, r0
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ff33 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff ffaf 	bl	8000cc4 <SysTick_Config>
 8000d66:	0003      	movs	r3, r0
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d86:	e14f      	b.n	8001028 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <HAL_GPIO_Init+0x30>
 8000d9e:	e140      	b.n	8001022 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d130      	bne.n	8000e1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	2201      	movs	r2, #1
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d017      	beq.n	8000e56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	58d3      	ldr	r3, [r2, r3]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2207      	movs	r2, #7
 8000e74:	4013      	ands	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	400b      	ands	r3, r1
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	23c0      	movs	r3, #192	; 0xc0
 8000ee4:	029b      	lsls	r3, r3, #10
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d100      	bne.n	8000eec <HAL_GPIO_Init+0x17c>
 8000eea:	e09a      	b.n	8001022 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eec:	4b54      	ldr	r3, [pc, #336]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef0:	4b53      	ldr	r3, [pc, #332]	; (8001040 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x2d4>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	589b      	ldr	r3, [r3, r2]
 8000f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	43da      	mvns	r2, r3
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x1ea>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a47      	ldr	r2, [pc, #284]	; (8001048 <HAL_GPIO_Init+0x2d8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x1e6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a46      	ldr	r2, [pc, #280]	; (800104c <HAL_GPIO_Init+0x2dc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x1e2>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a45      	ldr	r2, [pc, #276]	; (8001050 <HAL_GPIO_Init+0x2e0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x1de>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a44      	ldr	r2, [pc, #272]	; (8001054 <HAL_GPIO_Init+0x2e4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x1da>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x1ec>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	2103      	movs	r1, #3
 8000f60:	400a      	ands	r2, r1
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x2d4>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	035b      	lsls	r3, r3, #13
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	039b      	lsls	r3, r3, #14
 8001010:	4013      	ands	r3, r2
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_GPIO_Init+0x2e8>)
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	40da      	lsrs	r2, r3
 8001030:	1e13      	subs	r3, r2, #0
 8001032:	d000      	beq.n	8001036 <HAL_GPIO_Init+0x2c6>
 8001034:	e6a8      	b.n	8000d88 <HAL_GPIO_Init+0x18>
  }
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b006      	add	sp, #24
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	50000400 	.word	0x50000400
 800104c:	50000800 	.word	0x50000800
 8001050:	50000c00 	.word	0x50000c00
 8001054:	50001c00 	.word	0x50001c00
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	000a      	movs	r2, r1
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	1cba      	adds	r2, r7, #2
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	4013      	ands	r3, r2
 8001074:	d004      	beq.n	8001080 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e003      	b.n	8001088 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001080:	230f      	movs	r3, #15
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	781b      	ldrb	r3, [r3, #0]
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dbb      	adds	r3, r7, #6
 80010a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	1dba      	adds	r2, r7, #6
 80010aa:	8812      	ldrh	r2, [r2, #0]
 80010ac:	4013      	ands	r3, r2
 80010ae:	d008      	beq.n	80010c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80010b2:	1dba      	adds	r2, r7, #6
 80010b4:	8812      	ldrh	r2, [r2, #0]
 80010b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010b8:	1dbb      	adds	r3, r7, #6
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	0018      	movs	r0, r3
 80010be:	f7ff fbd7 	bl	8000870 <HAL_GPIO_EXTI_Callback>
  }
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f000 fbaf 	bl	8001842 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e4:	4bcf      	ldr	r3, [pc, #828]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	220c      	movs	r2, #12
 80010ea:	4013      	ands	r3, r2
 80010ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ee:	4bcd      	ldr	r3, [pc, #820]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	025b      	lsls	r3, r3, #9
 80010f6:	4013      	ands	r3, r2
 80010f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	4013      	ands	r3, r2
 8001102:	d100      	bne.n	8001106 <HAL_RCC_OscConfig+0x36>
 8001104:	e07e      	b.n	8001204 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	2b08      	cmp	r3, #8
 800110a:	d007      	beq.n	800111c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d112      	bne.n	8001138 <HAL_RCC_OscConfig+0x68>
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	429a      	cmp	r2, r3
 800111a:	d10d      	bne.n	8001138 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4bc1      	ldr	r3, [pc, #772]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x5a>
 8001128:	e06b      	b.n	8001202 <HAL_RCC_OscConfig+0x132>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d167      	bne.n	8001202 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	f000 fb85 	bl	8001842 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	025b      	lsls	r3, r3, #9
 8001140:	429a      	cmp	r2, r3
 8001142:	d107      	bne.n	8001154 <HAL_RCC_OscConfig+0x84>
 8001144:	4bb7      	ldr	r3, [pc, #732]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4bb6      	ldr	r3, [pc, #728]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	0249      	lsls	r1, r1, #9
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e027      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	02db      	lsls	r3, r3, #11
 800115c:	429a      	cmp	r2, r3
 800115e:	d10e      	bne.n	800117e <HAL_RCC_OscConfig+0xae>
 8001160:	4bb0      	ldr	r3, [pc, #704]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4baf      	ldr	r3, [pc, #700]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	02c9      	lsls	r1, r1, #11
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	4bad      	ldr	r3, [pc, #692]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4bac      	ldr	r3, [pc, #688]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0249      	lsls	r1, r1, #9
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e012      	b.n	80011a4 <HAL_RCC_OscConfig+0xd4>
 800117e:	4ba9      	ldr	r3, [pc, #676]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4ba8      	ldr	r3, [pc, #672]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001184:	49a8      	ldr	r1, [pc, #672]	; (8001428 <HAL_RCC_OscConfig+0x358>)
 8001186:	400a      	ands	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	4ba6      	ldr	r3, [pc, #664]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	025b      	lsls	r3, r3, #9
 8001192:	4013      	ands	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4ba2      	ldr	r3, [pc, #648]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4ba1      	ldr	r3, [pc, #644]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800119e:	49a3      	ldr	r1, [pc, #652]	; (800142c <HAL_RCC_OscConfig+0x35c>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d015      	beq.n	80011d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fcf8 	bl	8000ba0 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b4:	e009      	b.n	80011ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b6:	f7ff fcf3 	bl	8000ba0 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b64      	cmp	r3, #100	; 0x64
 80011c2:	d902      	bls.n	80011ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f000 fb3c 	bl	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ca:	4b96      	ldr	r3, [pc, #600]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	029b      	lsls	r3, r3, #10
 80011d2:	4013      	ands	r3, r2
 80011d4:	d0ef      	beq.n	80011b6 <HAL_RCC_OscConfig+0xe6>
 80011d6:	e015      	b.n	8001204 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fce2 	bl	8000ba0 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e2:	f7ff fcdd 	bl	8000ba0 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	; 0x64
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e326      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011f4:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0x112>
 8001200:	e000      	b.n	8001204 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001202:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2202      	movs	r2, #2
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_RCC_OscConfig+0x140>
 800120e:	e08b      	b.n	8001328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d005      	beq.n	8001228 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	2b0c      	cmp	r3, #12
 8001220:	d13e      	bne.n	80012a0 <HAL_RCC_OscConfig+0x1d0>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d13b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001228:	4b7e      	ldr	r3, [pc, #504]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2204      	movs	r2, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d004      	beq.n	800123c <HAL_RCC_OscConfig+0x16c>
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e302      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b79      	ldr	r3, [pc, #484]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a7b      	ldr	r2, [pc, #492]	; (8001430 <HAL_RCC_OscConfig+0x360>)
 8001242:	4013      	ands	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	021a      	lsls	r2, r3, #8
 800124c:	4b75      	ldr	r3, [pc, #468]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800124e:	430a      	orrs	r2, r1
 8001250:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001252:	4b74      	ldr	r3, [pc, #464]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2209      	movs	r2, #9
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	4b71      	ldr	r3, [pc, #452]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001264:	f000 fc40 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001268:	0001      	movs	r1, r0
 800126a:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	220f      	movs	r2, #15
 8001272:	4013      	ands	r3, r2
 8001274:	4a6f      	ldr	r2, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x364>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	000a      	movs	r2, r1
 800127a:	40da      	lsrs	r2, r3
 800127c:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x368>)
 800127e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001280:	4b6e      	ldr	r3, [pc, #440]	; (800143c <HAL_RCC_OscConfig+0x36c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2513      	movs	r5, #19
 8001286:	197c      	adds	r4, r7, r5
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff fc43 	bl	8000b14 <HAL_InitTick>
 800128e:	0003      	movs	r3, r0
 8001290:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001292:	197b      	adds	r3, r7, r5
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d046      	beq.n	8001328 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800129a:	197b      	adds	r3, r7, r5
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	e2d0      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d027      	beq.n	80012f6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2209      	movs	r2, #9
 80012ac:	4393      	bics	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc72 	bl	8000ba0 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fc6d 	bl	8000ba0 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e2b6      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2204      	movs	r2, #4
 80012da:	4013      	ands	r3, r2
 80012dc:	d0f1      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b51      	ldr	r3, [pc, #324]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a53      	ldr	r2, [pc, #332]	; (8001430 <HAL_RCC_OscConfig+0x360>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	0019      	movs	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	021a      	lsls	r2, r3, #8
 80012ee:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	e018      	b.n	8001328 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f6:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80012fc:	2101      	movs	r1, #1
 80012fe:	438a      	bics	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fc4d 	bl	8000ba0 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fc48 	bl	8000ba0 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e291      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2204      	movs	r2, #4
 8001324:	4013      	ands	r3, r2
 8001326:	d1f1      	bne.n	800130c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2210      	movs	r2, #16
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x264>
 8001332:	e0a1      	b.n	8001478 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d140      	bne.n	80013bc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x282>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e277      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <HAL_RCC_OscConfig+0x370>)
 8001358:	4013      	ands	r3, r2
 800135a:	0019      	movs	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001362:	430a      	orrs	r2, r1
 8001364:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	0a19      	lsrs	r1, r3, #8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	061a      	lsls	r2, r3, #24
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	0b5b      	lsrs	r3, r3, #13
 8001380:	3301      	adds	r3, #1
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0212      	lsls	r2, r2, #8
 8001386:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	210f      	movs	r1, #15
 8001390:	400b      	ands	r3, r1
 8001392:	4928      	ldr	r1, [pc, #160]	; (8001434 <HAL_RCC_OscConfig+0x364>)
 8001394:	5ccb      	ldrb	r3, [r1, r3]
 8001396:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x368>)
 800139a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <HAL_RCC_OscConfig+0x36c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2513      	movs	r5, #19
 80013a2:	197c      	adds	r4, r7, r5
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fbb5 	bl	8000b14 <HAL_InitTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013ae:	197b      	adds	r3, r7, r5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d060      	beq.n	8001478 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	e242      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d03f      	beq.n	8001444 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0049      	lsls	r1, r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fbe5 	bl	8000ba0 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013dc:	f7ff fbe0 	bl	8000ba0 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e229      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4013      	ands	r3, r2
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_RCC_OscConfig+0x370>)
 8001400:	4013      	ands	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800140a:	430a      	orrs	r2, r1
 800140c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	0a19      	lsrs	r1, r3, #8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	061a      	lsls	r2, r3, #24
 800141c:	4b01      	ldr	r3, [pc, #4]	; (8001424 <HAL_RCC_OscConfig+0x354>)
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	e029      	b.n	8001478 <HAL_RCC_OscConfig+0x3a8>
 8001424:	40021000 	.word	0x40021000
 8001428:	fffeffff 	.word	0xfffeffff
 800142c:	fffbffff 	.word	0xfffbffff
 8001430:	ffffe0ff 	.word	0xffffe0ff
 8001434:	0800260c 	.word	0x0800260c
 8001438:	20000014 	.word	0x20000014
 800143c:	20000018 	.word	0x20000018
 8001440:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001444:	4bbd      	ldr	r3, [pc, #756]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4bbc      	ldr	r3, [pc, #752]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800144a:	49bd      	ldr	r1, [pc, #756]	; (8001740 <HAL_RCC_OscConfig+0x670>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fba6 	bl	8000ba0 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145a:	f7ff fba1 	bl	8000ba0 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1ea      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800146c:	4bb3      	ldr	r3, [pc, #716]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4013      	ands	r3, r2
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2208      	movs	r2, #8
 800147e:	4013      	ands	r3, r2
 8001480:	d036      	beq.n	80014f0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4bac      	ldr	r3, [pc, #688]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800148c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148e:	4bab      	ldr	r3, [pc, #684]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fb83 	bl	8000ba0 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb7e 	bl	8000ba0 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1c7      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b2:	4ba2      	ldr	r3, [pc, #648]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80014b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d0f1      	beq.n	80014a0 <HAL_RCC_OscConfig+0x3d0>
 80014bc:	e018      	b.n	80014f0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b9f      	ldr	r3, [pc, #636]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80014c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c2:	4b9e      	ldr	r3, [pc, #632]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	438a      	bics	r2, r1
 80014c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fb69 	bl	8000ba0 <HAL_GetTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fb64 	bl	8000ba0 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1ad      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014e6:	4b95      	ldr	r3, [pc, #596]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	d1f1      	bne.n	80014d4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2204      	movs	r2, #4
 80014f6:	4013      	ands	r3, r2
 80014f8:	d100      	bne.n	80014fc <HAL_RCC_OscConfig+0x42c>
 80014fa:	e0ae      	b.n	800165a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fc:	2027      	movs	r0, #39	; 0x27
 80014fe:	183b      	adds	r3, r7, r0
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001504:	4b8d      	ldr	r3, [pc, #564]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	055b      	lsls	r3, r3, #21
 800150c:	4013      	ands	r3, r2
 800150e:	d109      	bne.n	8001524 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001510:	4b8a      	ldr	r3, [pc, #552]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001514:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	0549      	lsls	r1, r1, #21
 800151a:	430a      	orrs	r2, r1
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800151e:	183b      	adds	r3, r7, r0
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b87      	ldr	r3, [pc, #540]	; (8001744 <HAL_RCC_OscConfig+0x674>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4013      	ands	r3, r2
 800152e:	d11a      	bne.n	8001566 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001530:	4b84      	ldr	r3, [pc, #528]	; (8001744 <HAL_RCC_OscConfig+0x674>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b83      	ldr	r3, [pc, #524]	; (8001744 <HAL_RCC_OscConfig+0x674>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0049      	lsls	r1, r1, #1
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb2f 	bl	8000ba0 <HAL_GetTick>
 8001542:	0003      	movs	r3, r0
 8001544:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fb2a 	bl	8000ba0 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e173      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x674>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4013      	ands	r3, r2
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	429a      	cmp	r2, r3
 8001570:	d107      	bne.n	8001582 <HAL_RCC_OscConfig+0x4b2>
 8001572:	4b72      	ldr	r3, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001576:	4b71      	ldr	r3, [pc, #452]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0049      	lsls	r1, r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	651a      	str	r2, [r3, #80]	; 0x50
 8001580:	e031      	b.n	80015e6 <HAL_RCC_OscConfig+0x516>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4d4>
 800158a:	4b6c      	ldr	r3, [pc, #432]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800158c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800158e:	4b6b      	ldr	r3, [pc, #428]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001590:	496b      	ldr	r1, [pc, #428]	; (8001740 <HAL_RCC_OscConfig+0x670>)
 8001592:	400a      	ands	r2, r1
 8001594:	651a      	str	r2, [r3, #80]	; 0x50
 8001596:	4b69      	ldr	r3, [pc, #420]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800159a:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800159c:	496a      	ldr	r1, [pc, #424]	; (8001748 <HAL_RCC_OscConfig+0x678>)
 800159e:	400a      	ands	r2, r1
 80015a0:	651a      	str	r2, [r3, #80]	; 0x50
 80015a2:	e020      	b.n	80015e6 <HAL_RCC_OscConfig+0x516>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	23a0      	movs	r3, #160	; 0xa0
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d10e      	bne.n	80015ce <HAL_RCC_OscConfig+0x4fe>
 80015b0:	4b62      	ldr	r3, [pc, #392]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b4:	4b61      	ldr	r3, [pc, #388]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	00c9      	lsls	r1, r1, #3
 80015ba:	430a      	orrs	r2, r1
 80015bc:	651a      	str	r2, [r3, #80]	; 0x50
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c2:	4b5e      	ldr	r3, [pc, #376]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	651a      	str	r2, [r3, #80]	; 0x50
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x516>
 80015ce:	4b5b      	ldr	r3, [pc, #364]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d2:	4b5a      	ldr	r3, [pc, #360]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015d4:	495a      	ldr	r1, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x670>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	651a      	str	r2, [r3, #80]	; 0x50
 80015da:	4b58      	ldr	r3, [pc, #352]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015de:	4b57      	ldr	r3, [pc, #348]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80015e0:	4959      	ldr	r1, [pc, #356]	; (8001748 <HAL_RCC_OscConfig+0x678>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fad7 	bl	8000ba0 <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f6:	e009      	b.n	800160c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fad2 	bl	8000ba0 <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e11a      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800160e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d0ef      	beq.n	80015f8 <HAL_RCC_OscConfig+0x528>
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fac1 	bl	8000ba0 <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001622:	e009      	b.n	8001638 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fabc 	bl	8000ba0 <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_RCC_OscConfig+0x67c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e104      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001638:	4b40      	ldr	r3, [pc, #256]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800163a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4013      	ands	r3, r2
 8001642:	d1ef      	bne.n	8001624 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001644:	2327      	movs	r3, #39	; 0x27
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001654:	493e      	ldr	r1, [pc, #248]	; (8001750 <HAL_RCC_OscConfig+0x680>)
 8001656:	400a      	ands	r2, r1
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2220      	movs	r2, #32
 8001660:	4013      	ands	r3, r2
 8001662:	d049      	beq.n	80016f8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d026      	beq.n	80016ba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001672:	2101      	movs	r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800167a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 800167e:	2101      	movs	r1, #1
 8001680:	430a      	orrs	r2, r1
 8001682:	635a      	str	r2, [r3, #52]	; 0x34
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_RCC_OscConfig+0x684>)
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_RCC_OscConfig+0x684>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0189      	lsls	r1, r1, #6
 800168e:	430a      	orrs	r2, r1
 8001690:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fa85 	bl	8000ba0 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800169c:	f7ff fa80 	bl	8000ba0 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0c9      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0f1      	beq.n	800169c <HAL_RCC_OscConfig+0x5cc>
 80016b8:	e01e      	b.n	80016f8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_RCC_OscConfig+0x684>)
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_OscConfig+0x684>)
 80016cc:	4922      	ldr	r1, [pc, #136]	; (8001758 <HAL_RCC_OscConfig+0x688>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa65 	bl	8000ba0 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016dc:	f7ff fa60 	bl	8000ba0 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0a9      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d1f1      	bne.n	80016dc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d100      	bne.n	8001702 <HAL_RCC_OscConfig+0x632>
 8001700:	e09e      	b.n	8001840 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x63a>
 8001708:	e077      	b.n	80017fa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	2b02      	cmp	r3, #2
 8001710:	d158      	bne.n	80017c4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_OscConfig+0x66c>)
 8001718:	4910      	ldr	r1, [pc, #64]	; (800175c <HAL_RCC_OscConfig+0x68c>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fa3f 	bl	8000ba0 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001726:	e01b      	b.n	8001760 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fa3a 	bl	8000ba0 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d914      	bls.n	8001760 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e083      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40021000 	.word	0x40021000
 8001740:	fffffeff 	.word	0xfffffeff
 8001744:	40007000 	.word	0x40007000
 8001748:	fffffbff 	.word	0xfffffbff
 800174c:	00001388 	.word	0x00001388
 8001750:	efffffff 	.word	0xefffffff
 8001754:	40010000 	.word	0x40010000
 8001758:	ffffdfff 	.word	0xffffdfff
 800175c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	049b      	lsls	r3, r3, #18
 8001768:	4013      	ands	r3, r2
 800176a:	d1dd      	bne.n	8001728 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4a37      	ldr	r2, [pc, #220]	; (8001850 <HAL_RCC_OscConfig+0x780>)
 8001772:	4013      	ands	r3, r2
 8001774:	0019      	movs	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	431a      	orrs	r2, r3
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 8001788:	430a      	orrs	r2, r1
 800178a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	0449      	lsls	r1, r1, #17
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fa01 	bl	8000ba0 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f9fc 	bl	8000ba0 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e045      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	049b      	lsls	r3, r3, #18
 80017be:	4013      	ands	r3, r2
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x6d4>
 80017c2:	e03d      	b.n	8001840 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 80017ca:	4922      	ldr	r1, [pc, #136]	; (8001854 <HAL_RCC_OscConfig+0x784>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff f9e6 	bl	8000ba0 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff f9e1 	bl	8000ba0 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e02a      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	049b      	lsls	r3, r3, #18
 80017f4:	4013      	ands	r3, r2
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x70a>
 80017f8:	e022      	b.n	8001840 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e01d      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_RCC_OscConfig+0x77c>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	401a      	ands	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	429a      	cmp	r2, r3
 800181a:	d10f      	bne.n	800183c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	23f0      	movs	r3, #240	; 0xf0
 8001820:	039b      	lsls	r3, r3, #14
 8001822:	401a      	ands	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	23c0      	movs	r3, #192	; 0xc0
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b00a      	add	sp, #40	; 0x28
 8001848:	bdb0      	pop	{r4, r5, r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	40021000 	.word	0x40021000
 8001850:	ff02ffff 	.word	0xff02ffff
 8001854:	feffffff 	.word	0xfeffffff

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e128      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b96      	ldr	r3, [pc, #600]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d91e      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b93      	ldr	r3, [pc, #588]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	4393      	bics	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	4b90      	ldr	r3, [pc, #576]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800188c:	f7ff f988 	bl	8000ba0 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001894:	e009      	b.n	80018aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001896:	f7ff f983 	bl	8000ba0 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4a8a      	ldr	r2, [pc, #552]	; (8001acc <HAL_RCC_ClockConfig+0x274>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e109      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b87      	ldr	r3, [pc, #540]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1ee      	bne.n	8001896 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2202      	movs	r2, #2
 80018be:	4013      	ands	r3, r2
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c2:	4b83      	ldr	r3, [pc, #524]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	22f0      	movs	r2, #240	; 0xf0
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2201      	movs	r2, #1
 80018dc:	4013      	ands	r3, r2
 80018de:	d100      	bne.n	80018e2 <HAL_RCC_ClockConfig+0x8a>
 80018e0:	e089      	b.n	80019f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ea:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	029b      	lsls	r3, r3, #10
 80018f2:	4013      	ands	r3, r2
 80018f4:	d120      	bne.n	8001938 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0e1      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	049b      	lsls	r3, r3, #18
 800190a:	4013      	ands	r3, r2
 800190c:	d114      	bne.n	8001938 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0d5      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d106      	bne.n	8001928 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191a:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2204      	movs	r2, #4
 8001920:	4013      	ands	r3, r2
 8001922:	d109      	bne.n	8001938 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0ca      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001928:	4b69      	ldr	r3, [pc, #420]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0c2      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001938:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2203      	movs	r2, #3
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4b62      	ldr	r3, [pc, #392]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001948:	430a      	orrs	r2, r1
 800194a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff f928 	bl	8000ba0 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d111      	bne.n	8001980 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800195c:	e009      	b.n	8001972 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195e:	f7ff f91f 	bl	8000ba0 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x274>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0a5      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001972:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	220c      	movs	r2, #12
 8001978:	4013      	ands	r3, r2
 800197a:	2b08      	cmp	r3, #8
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_ClockConfig+0x106>
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d111      	bne.n	80019ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001988:	e009      	b.n	800199e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198a:	f7ff f909 	bl	8000ba0 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x274>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e08f      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199e:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	220c      	movs	r2, #12
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d1ef      	bne.n	800198a <HAL_RCC_ClockConfig+0x132>
 80019aa:	e024      	b.n	80019f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d11b      	bne.n	80019ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b4:	e009      	b.n	80019ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b6:	f7ff f8f3 	bl	8000ba0 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a42      	ldr	r2, [pc, #264]	; (8001acc <HAL_RCC_ClockConfig+0x274>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e079      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	220c      	movs	r2, #12
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d1ef      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x15e>
 80019d6:	e00e      	b.n	80019f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f7ff f8e2 	bl	8000ba0 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <HAL_RCC_ClockConfig+0x274>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e068      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	220c      	movs	r2, #12
 80019f2:	4013      	ands	r3, r2
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d21e      	bcs.n	8001a42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4393      	bics	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a16:	f7ff f8c3 	bl	8000ba0 <HAL_GetTick>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	e009      	b.n	8001a34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a20:	f7ff f8be 	bl	8000ba0 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	4a28      	ldr	r2, [pc, #160]	; (8001acc <HAL_RCC_ClockConfig+0x274>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e044      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_ClockConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d1ee      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2204      	movs	r2, #4
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a20      	ldr	r2, [pc, #128]	; (8001ad4 <HAL_RCC_ClockConfig+0x27c>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2208      	movs	r2, #8
 8001a66:	4013      	ands	r3, r2
 8001a68:	d00a      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <HAL_RCC_ClockConfig+0x280>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	00da      	lsls	r2, r3, #3
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a80:	f000 f832 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001a84:	0001      	movs	r1, r0
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x278>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	4013      	ands	r3, r2
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x284>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	000a      	movs	r2, r1
 8001a96:	40da      	lsrs	r2, r3
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_RCC_ClockConfig+0x288>)
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_ClockConfig+0x28c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	250b      	movs	r5, #11
 8001aa2:	197c      	adds	r4, r7, r5
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff f835 	bl	8000b14 <HAL_InitTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001aae:	197b      	adds	r3, r7, r5
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001ab6:	197b      	adds	r3, r7, r5
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	e000      	b.n	8001abe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b004      	add	sp, #16
 8001ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	00001388 	.word	0x00001388
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	fffff8ff 	.word	0xfffff8ff
 8001ad8:	ffffc7ff 	.word	0xffffc7ff
 8001adc:	0800260c 	.word	0x0800260c
 8001ae0:	20000014 	.word	0x20000014
 8001ae4:	20000018 	.word	0x20000018

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b08e      	sub	sp, #56	; 0x38
 8001aec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001aee:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	230c      	movs	r3, #12
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d014      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x40>
 8001afe:	d900      	bls.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1a>
 8001b00:	e07b      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x112>
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x24>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e076      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4013      	ands	r3, r2
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b1a:	e07c      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b1c:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b20:	e079      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b22:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x144>)
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b26:	e076      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	401a      	ands	r2, r3
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b32:	5c9b      	ldrb	r3, [r3, r2]
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	0d9a      	lsrs	r2, r3, #22
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	3301      	adds	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d01a      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	4a35      	ldr	r2, [pc, #212]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x144>)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	69b8      	ldr	r0, [r7, #24]
 8001b5c:	69f9      	ldr	r1, [r7, #28]
 8001b5e:	f7fe fb7f 	bl	8000260 <__aeabi_lmul>
 8001b62:	0002      	movs	r2, r0
 8001b64:	000b      	movs	r3, r1
 8001b66:	0010      	movs	r0, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f7fe fb53 	bl	8000220 <__aeabi_uldivmod>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	000b      	movs	r3, r1
 8001b7e:	0013      	movs	r3, r2
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	e037      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2210      	movs	r2, #16
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	68b8      	ldr	r0, [r7, #8]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	f7fe fb5f 	bl	8000260 <__aeabi_lmul>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	000b      	movs	r3, r1
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f7fe fb33 	bl	8000220 <__aeabi_uldivmod>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	000b      	movs	r3, r1
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc2:	e017      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x140>)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f7fe fb46 	bl	8000260 <__aeabi_lmul>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	000b      	movs	r3, r1
 8001bd8:	0010      	movs	r0, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	001c      	movs	r4, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	001d      	movs	r5, r3
 8001be4:	0022      	movs	r2, r4
 8001be6:	002b      	movs	r3, r5
 8001be8:	f7fe fb1a 	bl	8000220 <__aeabi_uldivmod>
 8001bec:	0002      	movs	r2, r0
 8001bee:	000b      	movs	r3, r1
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf8:	e00d      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	0b5b      	lsrs	r3, r3, #13
 8001c00:	2207      	movs	r2, #7
 8001c02:	4013      	ands	r3, r2
 8001c04:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	0212      	lsls	r2, r2, #8
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c14:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b00e      	add	sp, #56	; 0x38
 8001c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	003d0900 	.word	0x003d0900
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200
 8001c30:	0800261c 	.word	0x0800261c

08001c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e032      	b.n	8001cac <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2239      	movs	r2, #57	; 0x39
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2238      	movs	r2, #56	; 0x38
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7fe fe49 	bl	80008f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2239      	movs	r2, #57	; 0x39
 8001c66:	2102      	movs	r1, #2
 8001c68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	0019      	movs	r1, r3
 8001c74:	0010      	movs	r0, r2
 8001c76:	f000 fabd 	bl	80021f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	223e      	movs	r2, #62	; 0x3e
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223a      	movs	r2, #58	; 0x3a
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	223b      	movs	r2, #59	; 0x3b
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223c      	movs	r2, #60	; 0x3c
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	223d      	movs	r2, #61	; 0x3d
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2239      	movs	r2, #57	; 0x39
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d108      	bne.n	8001cde <HAL_TIM_PWM_Start_IT+0x2a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223a      	movs	r2, #58	; 0x3a
 8001cd0:	5c9b      	ldrb	r3, [r3, r2]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	4193      	sbcs	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	e01f      	b.n	8001d1e <HAL_TIM_PWM_Start_IT+0x6a>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d108      	bne.n	8001cf6 <HAL_TIM_PWM_Start_IT+0x42>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	223b      	movs	r2, #59	; 0x3b
 8001ce8:	5c9b      	ldrb	r3, [r3, r2]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	4193      	sbcs	r3, r2
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	e013      	b.n	8001d1e <HAL_TIM_PWM_Start_IT+0x6a>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d108      	bne.n	8001d0e <HAL_TIM_PWM_Start_IT+0x5a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	223c      	movs	r2, #60	; 0x3c
 8001d00:	5c9b      	ldrb	r3, [r3, r2]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	4193      	sbcs	r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e007      	b.n	8001d1e <HAL_TIM_PWM_Start_IT+0x6a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223d      	movs	r2, #61	; 0x3d
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	4193      	sbcs	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e090      	b.n	8001e48 <HAL_TIM_PWM_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <HAL_TIM_PWM_Start_IT+0x82>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	223a      	movs	r2, #58	; 0x3a
 8001d30:	2102      	movs	r1, #2
 8001d32:	5499      	strb	r1, [r3, r2]
 8001d34:	e013      	b.n	8001d5e <HAL_TIM_PWM_Start_IT+0xaa>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d104      	bne.n	8001d46 <HAL_TIM_PWM_Start_IT+0x92>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	223b      	movs	r2, #59	; 0x3b
 8001d40:	2102      	movs	r1, #2
 8001d42:	5499      	strb	r1, [r3, r2]
 8001d44:	e00b      	b.n	8001d5e <HAL_TIM_PWM_Start_IT+0xaa>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d104      	bne.n	8001d56 <HAL_TIM_PWM_Start_IT+0xa2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	223c      	movs	r2, #60	; 0x3c
 8001d50:	2102      	movs	r1, #2
 8001d52:	5499      	strb	r1, [r3, r2]
 8001d54:	e003      	b.n	8001d5e <HAL_TIM_PWM_Start_IT+0xaa>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	223d      	movs	r2, #61	; 0x3d
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d02a      	beq.n	8001dba <HAL_TIM_PWM_Start_IT+0x106>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d830      	bhi.n	8001dcc <HAL_TIM_PWM_Start_IT+0x118>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d01b      	beq.n	8001da8 <HAL_TIM_PWM_Start_IT+0xf4>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d82a      	bhi.n	8001dcc <HAL_TIM_PWM_Start_IT+0x118>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_TIM_PWM_Start_IT+0xd0>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d009      	beq.n	8001d96 <HAL_TIM_PWM_Start_IT+0xe2>
 8001d82:	e023      	b.n	8001dcc <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2102      	movs	r1, #2
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]
      break;
 8001d94:	e01f      	b.n	8001dd6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2104      	movs	r1, #4
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
      break;
 8001da6:	e016      	b.n	8001dd6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2108      	movs	r1, #8
 8001db4:	430a      	orrs	r2, r1
 8001db6:	60da      	str	r2, [r3, #12]
      break;
 8001db8:	e00d      	b.n	8001dd6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	60da      	str	r2, [r3, #12]
      break;
 8001dca:	e004      	b.n	8001dd6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
      break;
 8001dd4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d130      	bne.n	8001e42 <HAL_TIM_PWM_Start_IT+0x18e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fb5b 	bl	80024a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d009      	beq.n	8001e0e <HAL_TIM_PWM_Start_IT+0x15a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_TIM_PWM_Start_IT+0x19c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_TIM_PWM_Start_IT+0x15a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <HAL_TIM_PWM_Start_IT+0x1a0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d111      	bne.n	8001e32 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2207      	movs	r2, #7
 8001e16:	4013      	ands	r3, r2
 8001e18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b06      	cmp	r3, #6
 8001e1e:	d010      	beq.n	8001e42 <HAL_TIM_PWM_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	e007      	b.n	8001e42 <HAL_TIM_PWM_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001e42:	230f      	movs	r3, #15
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	781b      	ldrb	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40010800 	.word	0x40010800
 8001e54:	40011400 	.word	0x40011400

08001e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d124      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d11d      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2203      	movs	r2, #3
 8001e82:	4252      	negs	r2, r2
 8001e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2203      	movs	r2, #3
 8001e94:	4013      	ands	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f99a 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e007      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 f98d 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7fe fc01 	bl	80006b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d125      	bne.n	8001f12 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d11e      	bne.n	8001f12 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2205      	movs	r2, #5
 8001eda:	4252      	negs	r2, r2
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	23c0      	movs	r3, #192	; 0xc0
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d004      	beq.n	8001efc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 f96d 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001efa:	e007      	b.n	8001f0c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f960 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7fe fbd4 	bl	80006b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d124      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2208      	movs	r2, #8
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11d      	bne.n	8001f6a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2209      	movs	r2, #9
 8001f34:	4252      	negs	r2, r2
 8001f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2203      	movs	r2, #3
 8001f46:	4013      	ands	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 f941 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001f52:	e007      	b.n	8001f64 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f934 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe fba8 	bl	80006b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2210      	movs	r2, #16
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d125      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2210      	movs	r2, #16
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d11e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2211      	movs	r2, #17
 8001f8c:	4252      	negs	r2, r2
 8001f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2208      	movs	r2, #8
 8001f94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 f914 	bl	80021d4 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e007      	b.n	8001fbe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 f907 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe fb7b 	bl	80006b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4252      	negs	r2, r2
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 f8e1 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2240      	movs	r2, #64	; 0x40
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d10f      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	4013      	ands	r3, r2
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d108      	bne.n	8002020 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2241      	movs	r2, #65	; 0x41
 8002014:	4252      	negs	r2, r2
 8002016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f000 f8e2 	bl	80021e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002034:	2317      	movs	r3, #23
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2238      	movs	r2, #56	; 0x38
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002046:	2302      	movs	r3, #2
 8002048:	e0ad      	b.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2238      	movs	r2, #56	; 0x38
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d100      	bne.n	800205a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002058:	e076      	b.n	8002148 <HAL_TIM_PWM_ConfigChannel+0x120>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d900      	bls.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002060:	e095      	b.n	800218e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d04e      	beq.n	8002106 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b08      	cmp	r3, #8
 800206c:	d900      	bls.n	8002070 <HAL_TIM_PWM_ConfigChannel+0x48>
 800206e:	e08e      	b.n	800218e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d021      	beq.n	80020c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800207c:	e087      	b.n	800218e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	0011      	movs	r1, r2
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f908 	bl	800229c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2108      	movs	r1, #8
 8002098:	430a      	orrs	r2, r1
 800209a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2104      	movs	r1, #4
 80020a8:	438a      	bics	r2, r1
 80020aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6999      	ldr	r1, [r3, #24]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	619a      	str	r2, [r3, #24]
      break;
 80020be:	e06b      	b.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	0011      	movs	r1, r2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f923 	bl	8002314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0109      	lsls	r1, r1, #4
 80020dc:	430a      	orrs	r2, r1
 80020de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4931      	ldr	r1, [pc, #196]	; (80021b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6999      	ldr	r1, [r3, #24]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	021a      	lsls	r2, r3, #8
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	619a      	str	r2, [r3, #24]
      break;
 8002104:	e048      	b.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	0011      	movs	r1, r2
 800210e:	0018      	movs	r0, r3
 8002110:	f000 f942 	bl	8002398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2108      	movs	r1, #8
 8002120:	430a      	orrs	r2, r1
 8002122:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2104      	movs	r1, #4
 8002130:	438a      	bics	r2, r1
 8002132:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69d9      	ldr	r1, [r3, #28]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	61da      	str	r2, [r3, #28]
      break;
 8002146:	e027      	b.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	0011      	movs	r1, r2
 8002150:	0018      	movs	r0, r3
 8002152:	f000 f961 	bl	8002418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0109      	lsls	r1, r1, #4
 8002164:	430a      	orrs	r2, r1
 8002166:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	490f      	ldr	r1, [pc, #60]	; (80021b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002174:	400a      	ands	r2, r1
 8002176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69d9      	ldr	r1, [r3, #28]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	021a      	lsls	r2, r3, #8
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	61da      	str	r2, [r3, #28]
      break;
 800218c:	e004      	b.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800218e:	2317      	movs	r3, #23
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
      break;
 8002196:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2238      	movs	r2, #56	; 0x38
 800219c:	2100      	movs	r1, #0
 800219e:	5499      	strb	r1, [r3, r2]

  return status;
 80021a0:	2317      	movs	r3, #23
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	781b      	ldrb	r3, [r3, #0]
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b006      	add	sp, #24
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	fffffbff 	.word	0xfffffbff

080021b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	05db      	lsls	r3, r3, #23
 800220a:	429a      	cmp	r2, r3
 800220c:	d007      	beq.n	800221e <TIM_Base_SetConfig+0x2a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <TIM_Base_SetConfig+0x9c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <TIM_Base_SetConfig+0x2a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <TIM_Base_SetConfig+0xa0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d108      	bne.n	8002230 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2270      	movs	r2, #112	; 0x70
 8002222:	4393      	bics	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	05db      	lsls	r3, r3, #23
 8002236:	429a      	cmp	r2, r3
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0x56>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <TIM_Base_SetConfig+0x9c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0x56>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <TIM_Base_SetConfig+0xa0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a12      	ldr	r2, [pc, #72]	; (8002298 <TIM_Base_SetConfig+0xa4>)
 800224e:	4013      	ands	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	4393      	bics	r3, r2
 8002262:	001a      	movs	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	615a      	str	r2, [r3, #20]
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40010800 	.word	0x40010800
 8002294:	40011400 	.word	0x40011400
 8002298:	fffffcff 	.word	0xfffffcff

0800229c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4393      	bics	r3, r2
 80022ae:	001a      	movs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2270      	movs	r2, #112	; 0x70
 80022ca:	4393      	bics	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2203      	movs	r2, #3
 80022d2:	4393      	bics	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2202      	movs	r2, #2
 80022e4:	4393      	bics	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	621a      	str	r2, [r3, #32]
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b006      	add	sp, #24
 8002312:	bd80      	pop	{r7, pc}

08002314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	2210      	movs	r2, #16
 8002324:	4393      	bics	r3, r2
 8002326:	001a      	movs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a13      	ldr	r2, [pc, #76]	; (8002390 <TIM_OC2_SetConfig+0x7c>)
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a12      	ldr	r2, [pc, #72]	; (8002394 <TIM_OC2_SetConfig+0x80>)
 800234a:	4013      	ands	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2220      	movs	r2, #32
 800235e:	4393      	bics	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	621a      	str	r2, [r3, #32]
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b006      	add	sp, #24
 800238e:	bd80      	pop	{r7, pc}
 8002390:	ffff8fff 	.word	0xffff8fff
 8002394:	fffffcff 	.word	0xfffffcff

08002398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <TIM_OC3_SetConfig+0x78>)
 80023a8:	401a      	ands	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2270      	movs	r2, #112	; 0x70
 80023c4:	4393      	bics	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2203      	movs	r2, #3
 80023cc:	4393      	bics	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <TIM_OC3_SetConfig+0x7c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	621a      	str	r2, [r3, #32]
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b006      	add	sp, #24
 800240e:	bd80      	pop	{r7, pc}
 8002410:	fffffeff 	.word	0xfffffeff
 8002414:	fffffdff 	.word	0xfffffdff

08002418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <TIM_OC4_SetConfig+0x7c>)
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a15      	ldr	r2, [pc, #84]	; (8002498 <TIM_OC4_SetConfig+0x80>)
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a14      	ldr	r2, [pc, #80]	; (800249c <TIM_OC4_SetConfig+0x84>)
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <TIM_OC4_SetConfig+0x88>)
 8002460:	4013      	ands	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	621a      	str	r2, [r3, #32]
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b006      	add	sp, #24
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	ffffefff 	.word	0xffffefff
 8002498:	ffff8fff 	.word	0xffff8fff
 800249c:	fffffcff 	.word	0xfffffcff
 80024a0:	ffffdfff 	.word	0xffffdfff

080024a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	221f      	movs	r2, #31
 80024b4:	4013      	ands	r3, r2
 80024b6:	2201      	movs	r2, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	43d2      	mvns	r2, r2
 80024c6:	401a      	ands	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	211f      	movs	r1, #31
 80024d4:	400b      	ands	r3, r1
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4099      	lsls	r1, r3
 80024da:	000b      	movs	r3, r1
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b006      	add	sp, #24
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2238      	movs	r2, #56	; 0x38
 80024fa:	5c9b      	ldrb	r3, [r3, r2]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002500:	2302      	movs	r3, #2
 8002502:	e042      	b.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2238      	movs	r2, #56	; 0x38
 8002508:	2101      	movs	r1, #1
 800250a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2239      	movs	r2, #57	; 0x39
 8002510:	2102      	movs	r1, #2
 8002512:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2270      	movs	r2, #112	; 0x70
 8002528:	4393      	bics	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	429a      	cmp	r2, r3
 8002548:	d009      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10c      	bne.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	4393      	bics	r3, r2
 8002564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4313      	orrs	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2239      	movs	r2, #57	; 0x39
 800257c:	2101      	movs	r1, #1
 800257e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2238      	movs	r2, #56	; 0x38
 8002584:	2100      	movs	r1, #0
 8002586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b004      	add	sp, #16
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40010800 	.word	0x40010800
 8002598:	40011400 	.word	0x40011400

0800259c <__libc_init_array>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2600      	movs	r6, #0
 80025a0:	4d0c      	ldr	r5, [pc, #48]	; (80025d4 <__libc_init_array+0x38>)
 80025a2:	4c0d      	ldr	r4, [pc, #52]	; (80025d8 <__libc_init_array+0x3c>)
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	42a6      	cmp	r6, r4
 80025aa:	d109      	bne.n	80025c0 <__libc_init_array+0x24>
 80025ac:	2600      	movs	r6, #0
 80025ae:	f000 f821 	bl	80025f4 <_init>
 80025b2:	4d0a      	ldr	r5, [pc, #40]	; (80025dc <__libc_init_array+0x40>)
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <__libc_init_array+0x44>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	42a6      	cmp	r6, r4
 80025bc:	d105      	bne.n	80025ca <__libc_init_array+0x2e>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	00b3      	lsls	r3, r6, #2
 80025c2:	58eb      	ldr	r3, [r5, r3]
 80025c4:	4798      	blx	r3
 80025c6:	3601      	adds	r6, #1
 80025c8:	e7ee      	b.n	80025a8 <__libc_init_array+0xc>
 80025ca:	00b3      	lsls	r3, r6, #2
 80025cc:	58eb      	ldr	r3, [r5, r3]
 80025ce:	4798      	blx	r3
 80025d0:	3601      	adds	r6, #1
 80025d2:	e7f2      	b.n	80025ba <__libc_init_array+0x1e>
 80025d4:	08002630 	.word	0x08002630
 80025d8:	08002630 	.word	0x08002630
 80025dc:	08002630 	.word	0x08002630
 80025e0:	08002634 	.word	0x08002634

080025e4 <memset>:
 80025e4:	0003      	movs	r3, r0
 80025e6:	1882      	adds	r2, r0, r2
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d100      	bne.n	80025ee <memset+0xa>
 80025ec:	4770      	bx	lr
 80025ee:	7019      	strb	r1, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e7f9      	b.n	80025e8 <memset+0x4>

080025f4 <_init>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr

08002600 <_fini>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002606:	bc08      	pop	{r3}
 8002608:	469e      	mov	lr, r3
 800260a:	4770      	bx	lr
